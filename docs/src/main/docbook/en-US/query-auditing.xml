<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="auditing">
    <title>Auditing</title>
    <para>
        A common requirement for entities is tracking what is being done with them. 
        CDI Query provides a convenient way to support this requirement.
    </para>
    <tip>
        <para>
            CDI Query does not support creating revisions of entities. If this is a
            requirement for your audits, have a look at Hibernate Envers.
        </para>
    </tip>
    
    <section id="auditing-activation">
        <title>Activating Auditing</title>
        <para>
            CDI Query uses an entity listener to update auditing data before entities
            get created or update. The entity listener must be activated before it
            can be used. This can either be done globally for all entities of a persistent
            unit or per entity.
        </para>
        <para>
            Activation per persistence unit:
        </para>
        <programlisting role="XML"><![CDATA[<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd" version="2.0">
    <persistence-unit-metadata>
        <persistence-unit-defaults>
            <entity-listeners>
                <entity-listener class="com.ctp.cdi.query.audit.AuditEntityListener" />
            </entity-listeners>
        </persistence-unit-defaults>
    </persistence-unit-metadata>
</entity-mappings>]]>
        </programlisting>
        <para>
            Activation per entity:
        </para>
        <programlisting role="JAVA"><![CDATA[@Entity
@EntityListeners(AuditEntityListener.class)
public class AuditedEntity implements Serializable {
    ...
}]]>    </programlisting>
    </section>
    
    <section id="auditing-usage">
        <title>Using Auditing Annotations</title>
        <para>
            All that has to be done now is annotating the entity properties which are used
            to audit the entity.
        </para>
        <section id="auditing-usage-timestamps">
            <title>Updating Timestamps</title>
            <para>
                To keep track on creation and modification times, following annotations
                can be used:
            </para>
            <programlisting role="JAVA"><![CDATA[@Entity
public class AuditedEntity implements Serializable {
    ...
    @Temporal(TemporalType.TIMESTAMP)
    @CreatedOn
    private Date created;
    
    @Temporal(TemporalType.TIMESTAMP)
    @ModifiedOn
    private Date updated;
    ... 
}]]>        </programlisting>
            <para>
                In case the modification date should also be set during entity creation,
                the annotation can be customized:
            </para>
            <programlisting role="JAVA"><![CDATA[@ModifiedOn(setOnCreate=true)]]></programlisting>
        </section>
        <section id="auditing-usage-principal">
            <title>Who's Changing My Entities?</title>
            <para>
                Beside keeping track of when a change has happened, it's also often critical
                to track who's responsible for the change. Annotate a user tracking field
                with the following annotation:
            </para>
            <programlisting role="JAVA"><![CDATA[@Entity
public class AuditedEntity implements Serializable {
    ...
    @ModifiedBy
    private String auditUser;
    ... 
}]]>        </programlisting>
            <para>
                Now there's a little help needed. The entity listener needs to be able
                to resolve the current user - there must be a bean available of the
                matching type for the annotation property, exposed over a special 
                CDI qualifier:
            </para>
            <programlisting role="JAVA"><![CDATA[public class UserProvider {
    @Inject
    private User user;
    
    @Produces @CurrentUser
    public String currentUser() {
        return user.getUsername();
    }
    ... 
}]]>        </programlisting>
            <tip>
                <para>
                    If you expose another entity here, make sure this entity is attached
                    to a persistent context. Also, be aware that the CDI container will
                    proxy a scoped bean, which might confuse the persistence provider
                    when peristing / updating the target entity.
                </para>
            </tip>
        </section>
    </section>

</chapter>