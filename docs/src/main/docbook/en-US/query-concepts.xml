<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="coreconcepts">
    <title>Core Concepts</title>
    
    <section id="daos">
        <title>DAOs</title>
        <para>
            With the CDI Query Module, it is possible to make a DAO out of basically any abstract class or interface (using
            a concrete class will work too, but you won't be able to use most of the CDI Query features).
            All that is required is to mark the type as such with a simple annotation:
        </para>
        <programlisting role="JAVA"><![CDATA[@Dao(Person.class)
public abstract class PersonDao {
    ...
}

@Dao(Person.class)
public interface PersonDao {
    ...
}]]>    </programlisting>
        <para>
            The <literal>@Dao</literal> annotation tells CDI Query that this is a DAO for the Person entity. Any method defined on the DAO
            will be processed by the framework. The annotation does not require to set the entity class (we'll see later why)
            but if there are just plain classes or interfaces this is the only way to tell the framework what entity
            the DAO relates to. In order to simplify this, CDI Query provides several base types.
        </para>
        <section id="daos-entity-dao">
            <title>The <literal>EntityDao</literal> interface</title>
            <para>
                Although mainly intended to hold complex query logic, working with both a DAO and an entity manager in
                the service layer might unnecessarily clutter code. In order to avoid this for the most common cases, 
                CDI Query provides base types which can be used to replace the entity manager.
            </para>
            <para>
                The top base type is the <literal>EntityDao</literal> interface, providing common methods used with an entity manager. 
                The following code shows the most important methods of the interface:
            </para>
            <programlisting role="JAVA"><![CDATA[public interface EntityDao<E, PK extends Serializable> {
    E save(E entity);
    E saveAndFlush(E entity);
    void remove(E entity);
    E findBy(PK primaryKey);
    List<E> findAll();
    Long count();
}]]>        </programlisting>
            <para>
                The concrete DAO can then extend this basic interface. For our person DAO, this might look like the following:
            </para>
            <programlisting role="JAVA"><![CDATA[@Dao
public interface PersonDao extends EntityDao<Person, Long> {
    Person findBySsn(String ssn);
}]]>        </programlisting>
            <tip>
                <para>
                    Annotations on interfaces do not inherit. If the <literal>EntityDao</literal> interface is extended by 
                    another interface adding some more common methods, it is not possible to simply add the annotation there. 
                    It needs to go on each concrete DAO. The same is not true if a base class is introduced, as we see in the 
                    next chapter.
                </para>
            </tip>
        </section>
        <section id="daos-abstract-entity-dao">
            <title>The AbstractEntityDao class</title>
            <para>
                This class is an implementation of the <literal>EntityDao</literal> interface and provides additional
                functionality when custom query logic needs also to be implemented in the DAO (note that your DAOs do not
                support injection).  The class also provides additional support with regards to the JPA 2 criteria API.
            </para>
            <programlisting role="JAVA"><![CDATA[public abstract class PersonDao extends AbstractEntityDao<Person, Long> {
    public Person findBySSN(String ssn) {
        return getEntityManager()
                .createQuery("select p from Person p where p.ssn = ?1", Person.class)
                .setParameter(1, ssn)
                .getResultList();
    }

    public List<Person> findByCriteria(String name, Integer ageFrom, Integer ageTo) {
        return criteria()
                .eq(Person_.name, name)
                .between(Person_.age, ageFrom, ageTo)
                .createQuery()
                .getResultList();
    }
}]]>        </programlisting>
            <para>
                More details on using the JPA criteria support API are outlined in <xref linkend="criteria"/>.
            </para>
        </section>
    </section>
    
    <section id="multiple-entitymanagers">
        <title>Using Multiple <literal>EntityManager</literal>s</title>
        <para>
            While most applications will run just fine with a single <literal>EntityManager</literal>, there might be setups
            where multiple data sources are used. Similar to the default case, CDI Query requires to have producers for
            each <literal>EntityManager</literal> to be used, and to distinguish them over a CDI qualifier.
        </para>
        <programlisting role="JAVA"><![CDATA[@Qualifier
@Target({ TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)
public @interface CustomerData {
}
        
public class CustomerDataSourceProducer {
    ...
    @Produces @CustomerData
    public EntityManager create(){
        return emf.createEntityManager();
    }
}]]>    </programlisting>
        <para>
            The <literal>@CustomerData</literal> is a CDI qualifier - all available <literal>EntityManager</literal> have to
            be exposed similar with a different qualifier. The link to the Query DAO happens then over a custom annotation
            on the DAO:
        </para>
        <programlisting role="JAVA"><![CDATA[@Dao
@WithEntityManager(CustomerData.class)
public interface CustomerDao extends EntityDao<Customer, Long> {
    ...
}]]>    </programlisting>
        <tip>
            <para>
                Qualifiers in CDI can also use attributes. This is not supported with the @WithEntityManager annotation,
                it can only be qualified over a plain annotation.
            </para>
        </tip>
        <para>
            If a more granular qualifier support is required, the <literal>AbstractEntityDao</literal> class can be extended.
            The class provides a <literal>getEntityManager</literal> method, which can be overridden and annotated with
            the appropriate qualifiers:
        </para>
        <programlisting role="JAVA"><![CDATA[@Qualifier
@Target({ TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)
public @interface CustomerData {
    CustomerType value();
}
        
public abstract class CustomerDao extends AbstractEntityDao<Customer, Long> {
    @Override @CustomerData(CRM)
    protected abstract EntityManager getEntityManager();
    
    ...

}]]>    </programlisting>
    </section>
    <section id="concepts-entitymanagers">
        <title>Extending EntityManager</title>
        <para>
            When you inject a DAO in a class, this should be all you need to interact with
            when it comes to persistence. The base DAOs CDI Query provides contain various
            methods which should be fine for many cases. But then there's that special method
            on the <literal>EntityManager</literal> you'd need now...
        </para>
        <para>
            For this case, your DAOs can also extend or implement the <literal>EntityManager</literal>
            interface:
        </para>
        <programlisting role="JAVA"><![CDATA[@Dao
public interface SimpleDao extends EntityDao<Simple, Long>, EntityManager {
}]]>    </programlisting>
        <tip>
            <para>
                The CDI bean type of your DAO will not include the
                <literal>EntityManager</literal> type.
            </para>
        </tip>
    </section>

</chapter>