<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="extensions">
    <title>Extending CDI Query</title>
    
    <section id="extension-delegates">
        <title>Query Delegates</title>
        <para>
            While CDI Query defines several base interfaces, there might still be one or 
            another convenience method that is missing. This is actually intentional - 
            things should not get overloaded for each and every use case. That's why in
            CDI Query you can define your own reusable methods.
        </para>
        <para>
            For example, you might want to refresh an entity immediately after you've
            flushed it to the database (e.g. because a trigger fired and updated your entity).
            You might want to define the following method on a base DAO:
        </para>
        <programlisting role="JAVA"><![CDATA[public E saveAndRefresh(E entity) {
    entityManager.persist(entity);
    entityManager.flush();
    entityManager.refresh(entity);
    return entity;
}]]>    </programlisting>
        <para>
            This method is generic enough that you can use it in all your DAOs. You can now
            mixin this method in your DAOs with a simple mechanism.
        </para>
        <section id="extension-impl">
            <title>Implementing the Query Delegate</title>
            <para>
                The first step is to define an interface which contains all the extra methods
                for your DAOs:
            </para>
            <programlisting role="JAVA"><![CDATA[public interface DaoExtension<E> {
     E saveAndRefresh(E entity);
 }]]>       </programlisting>
            <para>
                As a next step, you need to provide an implementation for this interface
                once. It's also important that this implementation implements the
                <literal>DelegateQueryHandler</literal> interface (don't worry, this is)
                just an empty marker interface):
            </para>
            <programlisting role="JAVA"><![CDATA[public class DelegateDaoExtension<E> implements DaoExtension<E>, DelegateQueryHandler {
    @Inject
    private QueryInvocationContext context;

    @Override
    public E saveAndRefresh(E entity) {
        entityManager().persist(entity);
        entityManager().flush();
        entityManager().refresh(entity);
        return entity;
    }
    
    private EntityManager entityManager() {
        return context.getEntityManager();
    }
}]]>        </programlisting>
            <para>
                As you see in the sample, you can inject a <literal>QueryInvocationContext</literal>
                which contains utility methods like accessing the current 
                <literal>EntityManager</literal> and entity class.
            </para>
        </section>
        <section id="extension-impl">
            <title>Using the DAO Extension</title>
            <para>
                To use your newly created functionality, your DAOs can now be written like
            </para>
            <programlisting role="JAVA"><![CDATA[@Dao
public interface SimpleDao extends DaoExtension<Simple>, EntityDao<Simple, Long> {
}]]>        </programlisting>
            <para>
                Note that, if you define multiple extensions with equivalent method signatures,
                there is no specific order in which the implementation is selected.
            </para>
        </section>
    </section>
    <section id="extensions-querydsl">
        <title>Including Querydsl</title>
        <para>
            CDI Query contains basic support for the Querydsl framework for JPA. Implementing
            the <literal>QueryDslSupport</literal> interface (and including the Querydsl 
            dependencies) gives you access to a <code>JPAQuery</code> handle.
        </para>
        <para>
            You can find more information about Querydsl on the <ulink url="http://www.querydsl.com/">website</ulink>.
        </para>
    </section>

</chapter>