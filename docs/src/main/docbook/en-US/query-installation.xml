<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="installation">
    <title>Installation</title>
    <para>
        To use the CDI Query module, you need to add the API and implementation JARs to the runtime classpath
        of your enterprise application.
    </para>
    
    <section id="installation-prerequisites">
        <title>Prerequisites</title>
        <para>
            In order to use the CDI Query module, you have to run your application in a Java EE container supporting at
            least the Java EE 6 Web Profile. Other configurations like running it inside Tomcat or even a Java SE application
            are possible but currently not supported.
        </para>
    </section>

    <section id="maven-dependencies">
        <title>Maven dependency configuration</title>
        <para>
            If you are using <ulink url="http://maven.apache.org/">Maven</ulink> as your build tool, you can add the
            following dependencies to your pom.xml file to include the CDI Query module:
        </para>
        <programlisting role="XML"><![CDATA[<dependency>
    <groupId>com.ctp.cdi.query</groupId>
    <artifactId>cdi-query-api</artifactId>
    <version>${cdi.query.version}</version>
    <scope>compile</scope>
</dependency>

<dependency>
    <groupId>com.ctp.cdi.query</groupId>
    <artifactId>cdi-query-impl</artifactId>
    <version>${cdi.query.version}</version>
    <scope>runtime</scope>
</dependency>]]>
        </programlisting>
        <tip>
            <para>
                Substitute the expression ${cdi.query.version} with the most recent or appropriate version of the CDI Query module.
                Alternatively, you can create a
                <ulink href="http://www.sonatype.com/books/mvnref-book/reference/resource-filtering-sect-properties.html">Maven
                    user-defined property
                </ulink>
                to satisfy this substitution so you can centrally manage the version.
            </para>
        </tip>
        <para>
            Including the API at compile time and only include the implementation at runtime protects
            you from inadvertantly depending on an implementation class.
        </para>
    </section>
    
    <section id="installation-setup">
        <title>Setup your application for CDI Query</title>
        <para>
            CDI Query requires an EntityManager exposed via a CDI producer - which is common practice in Java EE 6 applications.
        </para>
        <programlisting role="JAVA"><![CDATA[public class DataSourceProducer {

    @PersistenceUnit
    private EntityManagerFactory emf;

    @Produces
    public EntityManager create(){
        return emf.createEntityManager();
    }

    public void close(@Disposes EntityManager em) {
        em.close();
    }
}]]>    </programlisting>
        <para>
            This allows the EntityManager to be injected over CDI instead of only being used with a @PersistenceContext
            annotation. Using multiple EntityManagers is explored in more detail in <xref linkend="multiple-entitymanagers"/>
        </para>
    </section>

    <para>
        You're now ready to use the CDI Query module in your DAOs!
    </para>

</chapter>